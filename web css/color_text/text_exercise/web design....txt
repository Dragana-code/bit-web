Frameworks
Selecting transcript lines in this section will navigate to timestamp in the video
- Developing sites as quickly and as efficiently as possible is a goal that all web designers share. In fact, it's quite common for designers to have a base set of files that they start every new project from. It's this philosophy that's led to the development and popularity of frameworks. A framework is a loose collection of HTML, CSS and JavaScript files that attempts to speed up site development by giving users an existing code base that covers site structure, semantics, styling and even functionality. Some frameworks are lightweight and give designers a minimal starting point and a focused set of features. While others employ a much more comprehensive approach and offer a wide range of choices and features. As with any tool there are pros and cons to using frameworks. Let's take a quick look at how most frameworks work and then discuss when they're appropriate. At the core of any framework will be at least one CSS file. The CSS file will contain styling that represents the focus of the framework. Now, for some this will be responsive layouts or layout grids, typography, forms, browser resets, theme styling or a mixture of things. Most frameworks will have a default set of styles, as well as containing a number of class styles for when you need to apply styling to specific elements or regions. The framework may also come with several demo or boilerplate HTML files that show how to use the framework or provide a starting point for your project's pages. Depending upon the framework's features you might also have a directory of JavaScript files that provide functionality like modal window tabs or other UI elements. And some frameworks might even contain image and font directories that provide icons and web fonts for your sites. While they're fairly simple to use, with this much functionality built in, you'll need to pay close attention to the framework documentation in order to take full advantage of what they have to offer. Now, thankfully most frameworks have detailed documentation that makes it pretty easy to get up to speed on how to use them. The main reason designers use frameworks is to speed up development time. With a framework the mark-up for typography, layout and other styling, they're already worked out. Perhaps most importantly, cross browser compatibility issues are addressed in most frameworks, eliminating what can be a tedious task. In that sense designers can rapidly create and style prototypes or even finished sites without having to author a ton of separate styles on their own. An often overlooked reason to use frameworks is for the education that they provide. A high quality framework is the result of literally hundreds, if not thousands, of hours of lessons that are learned the hard way by other designers. By using a framework you're not only benefiting from their knowledge, but you're able to dig into what makes the framework tick and figure out how to approach design different issues on your own. If you broaden your horizons and experiment with multiple frameworks, you can get a fairly broad survey into how the professional web community tackles most problems and that can be absolutely invaluable for new designers. However, frameworks aren't for everyone or for every project. Most of the time your projects might not even use half of what a framework has to offer. So, without taking the time to go through it and strip out all the unused code, your projects are gonna be a lot bigger than they need to be which impact performance. You're also restricted to working based on the way the framework is constructed. That's not always a negative, but if you don't choose wisely you could end up with a framework that doesn't fit your own personal workflow or standards. Also, if the framework is too restrictive you end up having to spend an inordinate amount of time to modify the framework for that particular project. While it's nice to have the head start, you don't want to spend twice the amount of time in overriding or modifying a framework's styles. So, whether frameworks are the right fit for you or not is largely a matter of personal preference. I recommend researching the ones that seem the best fit for your needs and then start experimenting with them. Be sure to check out the additional resources movie at the end of this course for a list of popular frameworks that can help get you started. Once you've had some hand-on experience with them you'll be better prepared to determine whether or not they'll work for you.

Learning HTML
Selecting transcript lines in this section will navigate to timestamp in the video
- HTML is one of the core skills of any web designer. And should be one of the first things that you master. Knowing where to start can be tough however. So, I wanna cover some of the very basics and give you an idea of what to focus on. If you understand just a few of the basic concepts of HTML the process of learning it becomes much easier. First, remember that HTML is a markup language. It uses tags to mark-up content on the page which it then identifies it as a specific type of element. Elements are the core building blocks of HTML documents. Most have an opening and a closing tag that wrap the content inside of it. Take this paragraph, for example. In this case the "p for paragraph" tag is used to identify this text as belonging to a paragraph. Noticed that the closing tag has a "/" to signify the closing of the element. A lot of people tend to confuse the terms tag and element. Tags refer to the actual tags themselves while an element is the tag plus its contents. You can also pass on more information about elements by using attributes. Some attributes are used to give necessary information. Such as where to find an image or where a link should point to. While others simply help give the element meaning. As you can with the class attribute that we use here that helps further identify the paragraph content. So, HTML documents consist of elements arranged in a specific order that helps structure the page's content. Attributes can be used to give further meaning to elements or to supply critical information about that element to the browser. With that in mind, here's what I recommend focusing on when learning HTML. First, focus on the basics of HTML syntax. There are rules for nesting tags inside of other tags to control the process of structuring documents. Other rules guide the basic structure of HTML documents and when certain tags are required. Learn the rules and restrictions around structuring elements so that your documents are built correctly and without errors. Next, study the most common HTML elements. Elements like paragraphs, headings, lists and tables make up the bulk of HTML documents. Concentrating on those first will minimize distractions and promote properly structured content. As you learn elements be sure to focus on which attributes are available for them, what values are accepted for them and when they're appropriate to use. If you're like me, trying to memorize a ton of tags and their attributes can be a bit of a chore. And that's why I recommend researching common page elements and the best practices around structuring them. Find out the recommended practices for marking-up addresses, quotes, product listings, blog posts and other types of common page elements. You'll not only learn a lot about the individual elements themselves, but how they fit together to properly structure content. You'll also learn that not every designer agrees about how to mark-up specific content. Much of how you structure your content will depend upon your own personal preferences. So, researching how other designers do this will help you form your own opinions. You should also spend some time looking at the HTML5 sectioning elements. These elements like article, nav and section were designed to help create more meaningful documents. Learning when they're appropriate can help you create more semantic pages. That should give you a good idea at how to approach learning HTML. Now, at the end of this course I'm gonna share a few resources with you that can make that process even easier.

Learning CSS
Selecting transcript lines in this section will navigate to timestamp in the video
- CSS stands for Cascading Style Sheets and unlike HTML, it's a presentation language, not a markup language. While that means that the syntax is totally different from HTML, it doesn't necessarily mean that it's any harder to learn. In fact, I'd actually say it's a bit easier to learn than HTML. The basics of CSS are pretty simple. Style sheets are made up of rules that control the styling and positioning of HTML elements. Each rule is made up of selectors which are used to target HTML elements and declarations, which contain properties and values that the browser then uses to style the element. In this case, the p is an element selector and it tells the browser to target all paragraphs in the current document. After the selector, there is a declaration block that's defined by the use of these curly braces. Inside those are properties that tell the browser which font to use, what size the text should be, and its color. As you can see, a colon separates the properties and their values, and then a semicolon is used to move from one property to the next. Although there are some additional syntax rules to learn, for the most part that's as complicated as CSS gets. So, what should you focus on as you learn CSS? Well, first I recommend learning as much as you can about selectors. There are multiple types of selectors and knowing the rules behind them and how they work is critical to writing efficient CSS. Without the ability to write selectors, you won't be able to target specific page elements or regions. Next, focus on learning which properties can be set for each type of element and which values are accepted for specific properties. This takes a little bit longer to learn but the basic properties and then values shouldn't take that long to master. You also wanna focus on how you could implement CSS within your HTML pages. CSS can actually be implemented within HTML a number of different ways. Here, for example, we're looking at it as a link external resource and you're gonna need to know when one method is appropriate over the others. You also wanna learn the three core rendering principles of CSS. Those are Specificity, Inheritance, and the Cascade. These principles control when rules are applied, the order in which they're applied, and how any styling conflicts between rules should be resolved. Without understanding those concepts, you'll never be able to write efficient or effective styles. Because there are some minor differences between how different browsers render specific properties, and because newer CSS properties have uneven support among browsers, it's really important that you have a general idea of what is supported and how rendering might differ from browser to browser. Occasionally, you can create fallbacks or workarounds for browsers, or simply design around the browsers' differences. As I deal with HTML, at the end of the course I'll provide a few CSS resources to help you get started learning CSS.

Learning JavaScript
Selecting transcript lines in this section will navigate to timestamp in the video
- Now that we've discussed learning approaches for HTML and CSS it's time to turn our attention to JavaScript, the third core web design skill that I keep mentioning. JavaScript is a scripting language, and that means the syntax is a little bit more complex than HTML and CSS, and there are more concepts to learn before you can write it with any degree of fluency. Now this typically means that for most people JavaScript takes a little longer to learn than HTML and CSS. There're a lot of different opinions out there about what the best approach is in terms of learning JavaScript, and not all of them are going to agree with mine. However, I feel very strongly about learning JavaScript a specific way. You see, I learned JavaScript the wrong way. Essentially I just picked up bits here and there from a tutorial, or I would go out and copy and paste a code snippet which created a lot of gaps in my JavaScript knowledge that later on I had to go back and fill in. So I want to recommend a path that's going to take a little bit longer for you to learn, but give you an overall better result. First, you need to understand what exactly JavaScript does. JavaScript is a client side programing language. Client side means that the code runs in the browser rather than on a server. It's designed to work with HTML and CSS, so there's a lot of built in functionality that makes it easy to control the behavior of your sites. JavaScript complements the static nature of HTML by making it possible to create interactive elements, display elements based on multiple conditions, animate items, or any number of script related tasks. Learning which specific tasks that JavaScript is suited for is really important, because it'll teach you when it's appropriate, and give you a focus for what you're trying to learn. Next, avoid learning JavaScript a snippet at a time the way I did. A lot of people learn this way, I was one of them. Now this is where you find a specific snippet of code to perform a task you need. You go out, you copy it, and you paste it in your project, and then you tweak it and modify it to get it working with your site. Now, you will pick up some JavaScript skill over time doing this, but you'll lose the context of why things need to be done a certain way, and you don't really fully understand the language and everything that's going on. I recommend learning the basics of JavaScript first before learning how to use libraries like jQuery. Using jQuery is really attractive, because it's so powerful so many people use it, but if you learn it before you learn JavaScript you're making a bit of a mistake. There are times that a library is not the right solution, and if you only know how to use a specific library you're going to lack the ability to discern when to use it and when not to. This type of approach means that you should learn at least the basics of JavaScript in an organized and focused way using a resource like a specific course or a book. Now, there are a lot of different tutorials out there that teach you how to perform a specific task or tasks in JavaScript, in my opinion, you need to have a solid foundation in JavaScript concepts and syntax so that you understand the why behind what it is that you're doing. Of course, not all web designers need to be experts at JavaScript. Designers that want to be seen more as a frontend developer need to be extremely fluent in JavaScript, but somebody that's more interested in user experience and site design might only need to know the basics. Regardless of how deep your JavaScript knowledge needs to go, however, make sure you cover the essential concepts of JavaScript so that you have a working knowledge of it. Above all be patient, learning JavaScript takes time, and if you give up too soon you're going to forget all that you've learned when you need to use JavaScript in your projects. Be sure to check out the additional resources movie at the end of the course for some of my favorite JavaScript resources.